apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.example.virosample"
        minSdkVersion 24
        targetSdkVersion 31

        versionCode getGitCommitCount()
        versionName getTag()
        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""
        buildConfigField "String", 'VERSION', "\"" + versionName + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    packagingOptions {
        exclude "META-INF/*.kotlin_module"
        pickFirst 'lib/arm64-v8a/libBulletCollision.so'
        pickFirst 'lib/arm64-v8a/libBulletDynamics.so'
        pickFirst 'lib/arm64-v8a/libBulletSoftBody.so'
        pickFirst 'lib/arm64-v8a/libLinearMath.so'
        pickFirst 'lib/arm64-v8a/libarcore_sdk_c.so'
        pickFirst 'lib/arm64-v8a/libfreetyped.so'
        pickFirst 'lib/arm64-v8a/libgvr.so'
        pickFirst 'lib/arm64-v8a/libgvr_audio.so'
        pickFirst 'lib/arm64-v8a/libviro_arcore.so'
        pickFirst 'lib/arm64-v8a/libviro_renderer.so'
        pickFirst 'lib/arm64-v8a/libvrapi.so'
        pickFirst 'lib/armeabi-v7a/libBulletCollision.so'
        pickFirst 'lib/armeabi-v7a/libBulletDynamics.so'
        pickFirst 'lib/armeabi-v7a/libBulletSoftBody.so'
        pickFirst 'lib/armeabi-v7a/libLinearMath.so'
        pickFirst 'lib/armeabi-v7a/libarcore_sdk_c.so'
        pickFirst 'lib/armeabi-v7a/libfreetyped.so'
        pickFirst 'lib/armeabi-v7a/libgvr.so'
        pickFirst 'lib/armeabi-v7a/libgvr_audio.so'
        pickFirst 'lib/armeabi-v7a/libviro_arcore.so'
        pickFirst 'lib/armeabi-v7a/libviro_renderer.so'
        pickFirst 'lib/armeabi-v7a/libvrapi.so'
        pickFirst 'lib/x86_64/libBulletCollision.so'
        pickFirst 'lib/x86_64/libBulletDynamics.so'
        pickFirst 'lib/x86_64/libBulletSoftBody.so'
        pickFirst 'lib/x86_64/libLinearMath.so'
        pickFirst 'lib/x86_64/libarcore_sdk_c.so'
        pickFirst 'lib/x86_64/libfreetyped.so'
        pickFirst 'lib/x86_64/libgvr.so'
        pickFirst 'lib/x86_64/libgvr_audio.so'
        pickFirst 'lib/x86_64/libviro_arcore.so'
        pickFirst 'lib/x86_64/libviro_renderer.so'
        pickFirst 'lib/x86_64/libvrapi.so'
    }

    flavorDimensions "source"
    productFlavors {
        aar {
            dimension "source"
        }
        code {
            dimension "source"
        }
    }

}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation project(':code-samples:ARBlackPanther')
    implementation project(':code-samples:ARHelloWorldAndroid')
    implementation project(':code-samples:ARPlacingObjects')
    implementation project(':code-samples:ARRetail')
    implementation project(':code-samples:ARTesla')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.6.0"
}

static def getTag() {
    def tagVersion = "$System.env.TAG_VERSION"
    if (tagVersion == "null") {
        println "No variable TAG_VERSION specified, I'm using 'git describe --abbrev=0'"
        def process = "git describe --abbrev=0".execute()
        tagVersion = process.text.toString().trim()
        if (tagVersion.equals("")) {
            println "abbrev failed, I'm using 'git --tags'"
            def processT = "git describe --tags".execute()
            tagVersion = processT.text.toString().trim()
        }
    }
    return tagVersion
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
